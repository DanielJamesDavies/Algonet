{
  "code": [
    [
      "function bogoSort(array) {",
      "\tvar isSorted = false;",
      "\tvar oldArray = array;",
      "\twhile (!isSorted) {",
      "\t\tisSorted = true;",
      "\t\tfor (var i = 0; i < array.length - 1; i++) {",
      "\t\t\tif (array[i] > array[i + 1]) {",
      "\t\t\t\tisSorted = false;",
      "\t\t\t}",
      "\t\t}",
      "",
      "\t\tif (!isSorted) {",
      "\t\t\toldArray = array;",
      "\t\t\tarray = [];",
      "\t\t\twhile (oldArray.length !== 0) {",
      "\t\t\t\tarray.push(oldArray.splice(Math.floor(Math.random() * oldArray.length), 1)[0]);",
      "\t\t\t}",
      "\t\t}",
      "\t}",
      "\treturn array;",
      "}"
    ],
    [
      "function bubbleSort(array) {",
      "\tvar noSwaps = false;",
      "\tvar numSorted = 0;",
      "\twhile (!noSwaps) {",
      "\t\tnoSwaps = true;",
      "\t\tfor (let i = 0; i < array.length - numSorted; i++) {",
      "\t\t\tif (array[i] > array[i + 1]) {",
      "\t\t\t\tvar temp = array[i];",
      "\t\t\t\tarray[i] = array[i + 1];",
      "\t\t\t\tarray[i + 1] = temp;",
      "\t\t\t\tnoSwaps = false;",
      "\t\t\t}",
      "\t\t}",
      "\t\tnumSorted++;",
      "\t}",
      "\treturn array;",
      "}"
    ],
    [
      "function selectionSort(array) {",
      "\tfor (let i = 0; i < array.length; i++) {",
      "\t\tvar minIndex = i;",
      "\t\tfor (let j = i + 1; j < array.length; j++) {",
      "\t\t\tif (array[j] < array[minIndex]) minIndex = j;",
      "\t\t}",
      "\t\tvar temp = array[i];",
      "\t\tarray[i] = array[minIndex];",
      "\t\tarray[minIndex] = temp;",
      "\t}",
      "\treturn array;",
      "}"
    ],
    [
      "function quickSort(array) {",
      "\tif (array.length < 2) return array;",
      "\tvar pivotIndex = Math.floor(Math.random() * array.length);",
      "\tvar pivot = array[pivotIndex];",
      "\tvar lower = [];",
      "\tvar higher = [];",
      "\tfor (let i = 0; i < array.length; i++) {",
      "\t\tif (i === pivotIndex) {",
      "\t\t\tcontinue;",
      "\t\t} else if (array[i] < pivot) {",
      "\t\t\tlower.push(array[i]);",
      "\t\t} else {",
      "\t\t\thigher.push(array[i]);",
      "\t\t}",
      "\t}",
      "\treturn quickSort(lower).concat([pivot], quickSort(higher));",
      "}"
    ],
    [
      "function radixSort(array) {",
      "\tvar maxDigits = String(Math.max(...array)).split(\"\").length;",
      "\tvar buckets = [];",
      "\tfor (let i = 0; i < maxDigits; i++) {",
      "\t\tbuckets = [[], [], [], [], [], [], [], [], [], []];",
      "\t\tfor (let j = 0; j < array.length; j++) {",
      "\t\t\tif (String(array[j]).split(\"\").length < maxDigits - i) {",
      "\t\t\t\tbuckets[0].push(array[j]);",
      "\t\t\t} else {",
      "\t\t\t\tbuckets[Math.floor(Math.abs(array[j]) / Math.pow(10, i)) % 10].push(array[j]);",
      "\t\t\t}",
      "\t\t}",
      "\tarray = [];",
      "\tbuckets.forEach((bucket) => {",
      "\t\tarray = array.concat(bucket);",
      "\t});",
      "\t}",
      "\treturn array;",
      "}"
    ],
    [
      "function preOrderDepthFirstSearch(graph, startingNode) {",
      "\tvar currPath = [startingNode];",
      "\tvar visited = [startingNode];",
      "\tdo {",
      "\t\tvar hasReachedDeadEnd = false;",
      "\t\twhile (!hasReachedDeadEnd) {",
      "\t\t\thasReachedDeadEnd = true;",
      "\t\t\tfor (let i = 0; i < graph[currPath[currPath.length - 1]].length; i++) {",
      "\t\t\t\tif (graph[currPath[currPath.length - 1]][i] !== 0 && !visited.includes(i)) {",
      "\t\t\t\t\thasReachedDeadEnd = false;",
      "\t\t\t\t\tvisited.push(i);",
      "\t\t\t\t\tcurrPath.push(i);",
      "\t\t\t\t\tbreak;",
      "\t\t\t\t}",
      "\t\t\t}",
      "\t\t}",
      "\t\tcurrPath.pop();",
      "\t} while (currPath.length != 0);",
      "\treturn visited.join(\", \");",
      "}"
    ],
    [
      "function breadthFirstSearch(graph, startingNode) {",
      "\tvar visited = [startingNode];",
      "",
      "\tfor (let i = 0; i < graph.length; i++) {",
      "\t\tfor (let j = 0; j < graph[visited[i]].length; j++) {",
      "\t\t\tif (graph[visited[i]][j] !== 0 && !visited.includes(j)) {",
      "\t\t\t\tvisited.push(j);",
      "\t\t\t}",
      "\t\t}",
      "\t}",
      "",
      "\treturn visited.join(\", \");",
      "}"
    ],
    [
      "function dijkstrasAlgorithm(graph, startingNode, targetNode) {",
      "\tvar nodes = [];",
      "\tfor (let i = 0; i < graph.length; i++) {",
      "\t\tnodes.push({ from: 0, distance: \"infinity\" });",
      "\t}",
      "\tnodes[startingNode] = { from: 0, distance: 0 };",
      "",
      "\tvar visited = [];",
      "",
      "\tvar currNode = startingNode;",
      "\twhile (currNode !== undefined && !visited.includes(targetNode)) {",
      "\t\tfor (let i = 0; i < graph[currNode].length; i++) {",
      "\t\t\tif (graph[currNode][i] !== 0) {",
      "\t\t\t\tvar newDistance = nodes[currNode].distance + graph[currNode][i];",
      "\t\t\t\tif (nodes[i].distance === \"infinity\" || newDistance < nodes[i].distance) {",
      "\t\t\t\t\tnodes[i] = { from: currNode, distance: newDistance };",
      "\t\t\t\t}",
      "\t\t\t}",
      "\t\t}",
      "\t\tvisited.push(currNode);",
      "\t\tlet nextNode;",
      "\t\tfor (let i = 0; i < nodes.length; i++) {",
      "\t\t\tif (!visited.includes(i) && (nextNode === undefined || nodes[i].distance < nodes[nextNode].distance)) nextNode = i;",
      "\t\t}",
      "\t\tcurrNode = nextNode;",
      "\t}",
      "",
      "\tvar path = [targetNode];",
      "\twhile (path[0] !== startingNode) {",
      "\t\tpath.splice(0, 0, nodes[path[0]].from);",
      "\t}",
      "",
      "\treturn path.join(\", \");",
      "}"
    ],
    [
      "function primsAlgorithm(graph) {",
      "\tvar minimumSpanningTree = [];",
      "\tfor (let i = 0; i < graph.length; i++) {",
      "\t\tminimumSpanningTree.push([]);",
      "\t\tfor (let j = 0; j < graph[i].length; j++) {",
      "\t\t\tminimumSpanningTree[i].push(0);",
      "\t\t}",
      "\t}",
      "",
      "\tvar currNode = Math.floor(Math.random() * graph.length);",
      "\tvar edgeQueue = [];",
      "\tvar visited = [currNode];",
      "",
      "\tdo {",
      "\t\tfor (let i = 0; i < graph[currNode].length; i++) {",
      "\t\t\tif (graph[currNode][i] !== 0) {",
      "\t\t\t\tedgeQueue.push([currNode, i]);",
      "\t\t\t}",
      "\t\t}",
      "\t\tedgeQueue.sort((a, b) => graph[a[0]][a[1]] - graph[b[0]][b[1]]);",
      "",
      "\t\tvar savedCurrNode = JSON.parse(JSON.stringify(currNode));",
      "\t\twhile (edgeQueue.length !== 0 && currNode === savedCurrNode) {",
      "\t\t\tif (!visited.includes(edgeQueue[0][1])) {",
      "\t\t\t\tvisited.push(edgeQueue[0][1]);",
      "\t\t\t\tminimumSpanningTree[edgeQueue[0][0]][edgeQueue[0][1]] = graph[edgeQueue[0][0]][edgeQueue[0][1]];",
      "\t\t\t\tminimumSpanningTree[edgeQueue[0][1]][edgeQueue[0][0]] = graph[edgeQueue[0][1]][edgeQueue[0][0]];",
      "\t\t\t\tcurrNode = edgeQueue[0][1];",
      "\t\t\t}",
      "\t\t\tedgeQueue.splice(0, 1);",
      "\t\t}",
      "\t} while (visited.length < graph.length);",
      "\treturn minimumSpanningTree;",
      "}"
    ],
    [
      "function randomMutationHillClimbing(weights, iter) {",
      "\t// generateRandomSolution",
      "\tvar solution = \"\";",
      "\tfor (let i = 0; i < weights.length; i++) {",
      "\t\tsolution += Math.floor(Math.random() * 2);",
      "\t}",
      "",
      "\t// getFitness",
      "\tlet solutionSplit = solution.split(\"\");",
      "\tlet left = 0;",
      "\tlet right = 0;",
      "\tfor (let i = 0; i < weights.length; i++) {",
      "\t\tif (solutionSplit[i] === \"0\") {",
      "\t\t\tleft += weights[i];",
      "\t\t} else {",
      "\t\t\tright += weights[i];",
      "\t\t}",
      "\t}",
      "\tvar fit = Math.abs(left - right);",
      "",
      "\tfor (let i = 0; i < iter; i++) {",
      "\t\t// smallChange",
      "\t\tlet solutionSplit2 = solution.split(\"\");",
      "\t\tlet changeIndex = Math.floor(Math.random() * solutionSplit2.length);",
      "\t\tif (solutionSplit2[changeIndex] === \"1\") {",
      "\t\t\tsolutionSplit2[changeIndex] = \"0\";",
      "\t\t} else {",
      "\t\t\tsolutionSplit2[changeIndex] = \"1\";",
      "\t\t}",
      "\t\tlet newSolution = solutionSplit2.join(\"\");",
      "",
      "\t\t// getFitness",
      "\t\tlet solutionSplit3 = newSolution.split(\"\");",
      "\t\tlet left = 0;",
      "\t\tlet right = 0;",
      "\t\tfor (let i = 0; i < weights.length; i++) {",
      "\t\t\tif (solutionSplit3[i] === \"0\") {",
      "\t\t\t\tleft += weights[i];",
      "\t\t\t} else {",
      "\t\t\t\tright += weights[i];",
      "\t\t\t}",
      "\t\t}",
      "\t\tlet newFit = Math.abs(left - right);",
      "",
      "\t\tif (newFit < fit) {",
      "\t\t\tsolution = newSolution;",
      "\t\t\tfit = newFit;",
      "\t\t}",
      "\t}",
      "\treturn solution;",
      "}"
    ],
    [
      "function randomRestartHillClimbing(weights, iter) {",
      "\t// generateRandomSolution",
      "\tvar solution = \"\";",
      "\tfor (let i = 0; i < weights.length; i++) {",
      "\t\tsolution += Math.floor(Math.random() * 2);",
      "\t}",
      "",
      "\t// getFitness",
      "\tlet solutionSplit = solution.split(\"\");",
      "\tlet left = 0;",
      "\tlet right = 0;",
      "\tfor (let i = 0; i < weights.length; i++) {",
      "\t\tif (solutionSplit[i] === \"0\") {",
      "\t\t\tleft += weights[i];",
      "\t\t} else {",
      "\t\t\tright += weights[i];",
      "\t\t}",
      "\t}",
      "\tvar fit = Math.abs(left - right);",
      "",
      "\tvar bestSolution = solution;",
      "\tvar bestFit = fit;",
      "",
      "\tfor (let i = 0; i < iter; i++) {",
      "\t\tvar random = Math.floor(Math.random() * 10) / 10;",
      "\t\tif (0.1 > random) {",
      "\t\t\t// generateRandomSolution",
      "\t\t\tsolution = \"\";",
      "\t\t\tfor (let i = 0; i < weights.length; i++) {",
      "\t\t\t\tsolution += Math.floor(Math.random() * 2);",
      "\t\t\t}",
      "",
      "\t\t\t// getFitness",
      "\t\t\tlet solutionSplit2 = solution.split(\"\");",
      "\t\t\tlet left = 0;",
      "\t\t\tlet right = 0;",
      "\t\t\tfor (let i = 0; i < weights.length; i++) {",
      "\t\t\t\tif (solutionSplit2[i] === \"0\") {",
      "\t\t\t\t\tleft += weights[i];",
      "\t\t\t\t} else {",
      "\t\t\t\t\tright += weights[i];",
      "\t\t\t\t}",
      "\t\t\t}",
      "\t\t\tfit = Math.abs(left - right);",
      "",
      "\t\t\tif (fit < bestFit) {",
      "\t\t\t\tbestSolution = solution;",
      "\t\t\t\tbestFit = fit;",
      "\t\t\t}",
      "\t\t}",
      "",
      "\t\t// smallChange",
      "\t\tlet solutionSplit3 = solution.split(\"\");",
      "\t\tlet changeIndex = Math.floor(Math.random() * solutionSplit3.length);",
      "\t\tif (solutionSplit3[changeIndex] === \"1\") {",
      "\t\t\tsolutionSplit3[changeIndex] = \"0\";",
      "\t\t} else {",
      "\t\t\tsolutionSplit3[changeIndex] = \"1\";",
      "\t\t}",
      "\t\tlet newSolution = solutionSplit3.join(\"\");",
      "",
      "\t\t// getFitness",
      "\t\tlet solutionSplit4 = newSolution.split(\"\");",
      "\t\tlet left = 0;",
      "\t\tlet right = 0;",
      "\t\tfor (let i = 0; i < weights.length; i++) {",
      "\t\t\tif (solutionSplit4[i] === \"0\") {",
      "\t\t\t\tleft += weights[i];",
      "\t\t\t} else {",
      "\t\t\t\tright += weights[i];",
      "\t\t\t}",
      "\t\t}",
      "\t\tlet newFit = Math.abs(left - right);",
      "",
      "\t\tif (newFit < fit) {",
      "\t\t\tsolution = newSolution;",
      "\t\t\tfit = newFit;",
      "\t\t}",
      "\t\tif (newFit < bestFit) {",
      "\t\t\tbestSolution = newSolution;",
      "\t\t\tbestFit = newFit;",
      "\t\t}",
      "\t}",
      "\treturn bestSolution;",
      "}"
    ],
    [
      "function stochasticHillClimbing(weights, iter) {",
      "\t// generateRandomSolution",
      "\tvar solution = \"\";",
      "\tfor (let i = 0; i < weights.length; i++) {",
      "\t\tsolution += Math.floor(Math.random() * 2);",
      "\t}",
      "",
      "\t// getFitness",
      "\tlet solutionSplit = solution.split(\"\");",
      "\tlet left = 0;",
      "\tlet right = 0;",
      "\tfor (let i = 0; i < weights.length; i++) {",
      "\t\tif (solutionSplit[i] === \"0\") {",
      "\t\t\tleft += weights[i];",
      "\t\t} else {",
      "\t\t\tright += weights[i];",
      "\t\t}",
      "\t}",
      "\tvar fit = Math.abs(left - right);",
      "",
      "\tvar t = 1;",
      "\tfor (let i = 0; i < iter; i++) {",
      "\t\t// smallChange",
      "\t\tlet solutionSplit2 = solution.split(\"\");",
      "\t\tlet changeIndex = Math.floor(Math.random() * solutionSplit2.length);",
      "\t\tif (solutionSplit2[changeIndex] === \"1\") {",
      "\t\t\tsolutionSplit2[changeIndex] = \"0\";",
      "\t\t} else {",
      "\t\t\tsolutionSplit2[changeIndex] = \"1\";",
      "\t\t}",
      "\t\tlet newSolution = solutionSplit2.join(\"\");",
      "",
      "\t\t// getFitness",
      "\t\tlet solutionSplit3 = newSolution.split(\"\");",
      "\t\tlet left = 0;",
      "\t\tlet right = 0;",
      "\t\tfor (let i = 0; i < weights.length; i++) {",
      "\t\t\tif (solutionSplit3[i] === \"0\") {",
      "\t\t\t\tleft += weights[i];",
      "\t\t\t} else {",
      "\t\t\t\tright += weights[i];",
      "\t\t\t}",
      "\t\t}",
      "\t\tlet newFit = Math.abs(left - right);",
      "",
      "\t\tvar random = Math.floor(Math.random() * 10) / 10;",
      "\t\tvar accept = 1 / (1 + Math.exp((newFit - fit) / t));",
      "\t\tif (newFit < fit || random < accept) {",
      "\t\t\tsolution = newSolution;",
      "\t\t\tfit = newFit;",
      "\t\t}",
      "\t}",
      "\treturn solution;",
      "}"
    ],
    [
      "function simulatedAnnealing(weights, iter) {",
      "\t// generateRandomSolution",
      "\tvar solution = \"\";",
      "\tfor (let i = 0; i < weights.length; i++) {",
      "\t\tsolution += Math.floor(Math.random() * 2);",
      "\t}",
      "",
      "\t// getFitness",
      "\tlet solutionSplit = solution.split(\"\");",
      "\tlet left = 0;",
      "\tlet right = 0;",
      "\tfor (let i = 0; i < weights.length; i++) {",
      "\t\tif (solutionSplit[i] === \"0\") {",
      "\t\t\tleft += weights[i];",
      "\t\t} else {",
      "\t\t\tright += weights[i];",
      "\t\t}",
      "\t}",
      "\tvar fit = Math.abs(left - right);",
      "",
      "\tvar initialTemperature = 100;",
      "\tvar temperature = initialTemperature;",
      "\tfor (let i = 0; i < iter; i++) {",
      "\t\t// smallChange",
      "\t\tlet solutionSplit2 = solution.split(\"\");",
      "\t\tlet changeIndex = Math.floor(Math.random() * solutionSplit2.length);",
      "\t\tif (solutionSplit2[changeIndex] === \"1\") {",
      "\t\t\tsolutionSplit2[changeIndex] = \"0\";",
      "\t\t} else {",
      "\t\t\tsolutionSplit2[changeIndex] = \"1\";",
      "\t\t}",
      "\t\tlet newSolution = solutionSplit2.join(\"\");",
      "",
      "\t\t// getFitness",
      "\t\tlet solutionSplit3 = newSolution.split(\"\");",
      "\t\tlet left = 0;",
      "\t\tlet right = 0;",
      "\t\tfor (let i = 0; i < weights.length; i++) {",
      "\t\t\tif (solutionSplit3[i] === \"0\") {",
      "\t\t\t\tleft += weights[i];",
      "\t\t\t} else {",
      "\t\t\t\tright += weights[i];",
      "\t\t\t}",
      "\t\t}",
      "\t\tlet newFit = Math.abs(left - right);",
      "",
      "\t\ttemperature = initialTemperature / (i + 1);",
      "\t\tvar random = Math.floor(Math.random() * 10) / 10;",
      "\t\tvar accept = 1 / (1 + Math.exp((newFit - fit) / temperature));",
      "\t\tif (newFit < fit || random < accept) {",
      "\t\t\tsolution = newSolution;",
      "\t\t\tfit = newFit;",
      "\t\t}",
      "\t}",
      "\treturn solution;",
      "}"
    ],
    [
      "function binarySearchRecursive(value, array, start, end) {",
      "\tif (start === undefined) {",
      "\t\tstart = 0;",
      "\t}",
      "\tif (end === undefined) {",
      "\t\tend = array.length - 1;",
      "\t}",
      "\tconst mid = Math.floor((start + end) / 2);",
      "\tif (array[mid] === value) {",
      "\t\treturn mid;",
      "\t}",
      "\tif (start >= end) {",
      "\t\treturn -1;",
      "\t}",
      "\tif (array[mid] >= value) {",
      "\t\treturn binarySearchRecursive(value, array, start, mid - 1);",
      "\t}",
      "\treturn binarySearchRecursive(value, array, mid + 1, end);",
      "}"
    ],
    [
      "function binarySearchIterative(value, array) {",
      "\tlet low = 0;",
      "\tlet mid = 0;",
      "\tlet high = array.length;",
      "\twhile (true) {",
      "\t\tmid = Math.floor(low + (high - low) / 2);",
      "\t\tif (array[mid] < value) {",
      "\t\t\tlow = mid + 1;",
      "\t\t}",
      "\t\tif (array[mid] > value) {",
      "\t\t\thigh = mid - 1;",
      "\t\t}",
      "\t\tif (array[mid] === value) {",
      "\t\t\tbreak;",
      "\t\t}",
      "\t\tif (high < 0 || (mid === low && high === mid)) {",
      "\t\t\treturn -1;",
      "\t\t}",
      "\t}",
      "\treturn mid;",
      "}"
    ],
    [
      "function linearSearch(value, array) {",
      "\tfor (let i = 0; i < array.length; i++) {",
      "\t\tif (array[i] === value) {",
      "\t\t\treturn i;",
      "\t\t}",
      "\t}",
      "\treturn -1;",
      "}"
    ],
    [
      "function jumpSearch(value, array) {",
      "\tlet step = Math.floor(Math.sqrt(array.length));",
      "\tlet index = 0;",
      "",
      "\twhile (index < array.length && array[index] < value) {",
      "\t\tindex += step;",
      "\t}",
      "\tif (index > array.length - 1) {",
      "\t\tindex = array.length - 1;",
      "\t}",
      "",
      "\tlet startStep = index - step;",
      "\tif (startStep < 0) startStep = 0;",
      "\twhile (index >= startStep) {",
      "\t\tif (array[index] === value) {",
      "\t\t\treturn index;",
      "\t\t}",
      "\t\tindex--;",
      "\t}",
      "\treturn -1;",
      "}"
    ],
    [
      "function interpolationSearch(value, array) {",
      "\tlet low = 0;",
      "\tlet mid = 0;",
      "\tlet high = array.length - 1;",
      "",
      "\twhile (low <= high && value >= array[low] && value <= array[high]) {",
      "\t\tmid = low + (value - array[low]) * Math.floor((high - low) / (array[high] - array[low]));",
      "\t\tif (array[mid] == value) {",
      "\t\t\treturn mid;",
      "\t\t}",
      "\t\tif (array[mid] < value) {",
      "\t\t\tlow = mid + 1;",
      "\t\t}",
      "\t\tif (array[mid] > value) {",
      "\t\t\thigh = mid - 1;",
      "\t\t}",
      "\t}",
      "\treturn -1;",
      "}"
    ]
  ]
}
